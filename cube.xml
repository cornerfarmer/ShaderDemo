<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>

<glsl_hacker>
	
  <window name="cube" title="Cube" 
          width="800" height="400"
          gl_version_major="2" gl_version_minor="1" />
 
 
	<script name="init_scene" run_mode="INIT" >
		<raw_data>
    <![CDATA[	

	lib_dir = gh_utils.get_scripting_libs_dir() 		
	dofile(lib_dir .. "lua/gx_cam_lib_v1.lua")
		
    
	winW, winH = gh_window.getsize(0)
	camera = gx_camera.create_perspective(60, 1, 0, 0, winW, winH, 0.1, 1000)
	gh_camera.set_position(camera, 0, 3, 3) 
	camera_lookat_x = 0
	camera_lookat_y = 0
	camera_lookat_z = 0
	gx_camera.init_orientation(camera, camera_lookat_x, camera_lookat_y, camera_lookat_z, 20, 90)
	gx_camera.set_mode_orbit()
	orbit_mode = 1
	keyboard_speed = 10.0
	camera_fov = 60.0
	gx_camera.set_orbit_lookat(camera, camera_lookat_x, camera_lookat_y, camera_lookat_z)
	gx_camera.set_keyboard_speed(keyboard_speed)

	cube_size = 1
  local demo_dir = gh_utils.get_scenegraph_dir() 		
  local model_directory = demo_dir .. "/Assets/" 
  model = gh_model.create_from_file_loader_obj("Lamppost.obj", model_directory, model_directory)
  street = gh_model.create_from_file_loader_obj("road.obj", model_directory, model_directory)
  sidewalk = gh_model.create_from_file_loader_obj("sidewalk.obj", model_directory, model_directory)
  wall = gh_model.create_from_file_loader_obj("wall.obj", model_directory, model_directory)
  if (model > 0) then
    gh_model.load_textures(model, model_directory)
    
    gh_object.set_materials_texture_unit_offset(model, 0)

    gh_object.set_position(model, 3, 0.2, 0)
    gh_object.set_euler_angles(model, 0, 0, 0)
    gh_object.set_scale(model, 0.3,  0.3,  0.3)
  
    gh_object.compute_faces_normal(model)
    gh_object.compute_vertices_normal(model)
  end  
  if (street > 0) then
    gh_model.load_textures(street, model_directory)
    gh_object.set_materials_texture_unit_offset(street, 0)

    gh_object.set_position(street, -2, 0, 0)
    gh_object.set_euler_angles(street, 0, 0, 0)
    gh_object.set_scale(street, 1,  1,  1)
  
    gh_object.compute_faces_normal(street)
    gh_object.compute_vertices_normal(street)
  end  
  if (sidewalk > 0) then
    gh_model.load_textures(sidewalk, model_directory)
    gh_object.set_materials_texture_unit_offset(sidewalk, 0)

    gh_object.set_position(sidewalk, 4, 0, 0)
    gh_object.set_euler_angles(sidewalk, 0, 0, 0)
    gh_object.set_scale(sidewalk, 1,  1,  1)
  
    gh_object.compute_faces_normal(sidewalk)
    gh_object.compute_vertices_normal(sidewalk)
  end  
  if (wall > 0) then
    gh_model.load_textures(wall, model_directory)
    gh_object.set_materials_texture_unit_offset(wall, 0)

    gh_object.set_position(wall, 6, 2, 0)
    gh_object.set_euler_angles(wall, 0, 0, 0)
    gh_object.set_scale(wall, 1,  1,  1)
  
    gh_object.compute_faces_normal(wall)
    gh_object.compute_vertices_normal(wall)
  end  


	grid = gh_utils.grid_create()
    gh_utils.grid_set_geometry_params(grid, 10, 10, 20, 20)
	
	shader_prog = gh_gpu_program.create_from_file("shader.glsl", 0)
	gh_node.set_name(shader_prog, "shader_prog") 
	
	gh_renderer.set_vsync(1)
	
	last_time = gh_utils.get_elapsed_time()
  
 
		]]></raw_data>
	</script> 

  
	<script name="update_scene" run_mode="FRAME" >
		<raw_data>
    <![CDATA[	

		local elapsed_time = gh_utils.get_elapsed_time()
local dt = elapsed_time - last_time
last_time = elapsed_time

		gx_camera.update(camera, dt)
		gh_camera.bind(camera) 
    
	gh_renderer.clear_color_depth_buffers(0.2, 0.2, 0.2, 1.0, 1.0)
	gh_renderer.set_depth_test_state(1)
	 
	 
	-- Bind vertex_color_prog to make it the active GPU program.
	--
	gh_gpu_program.bind(shader_prog)
	  gh_gpu_program.uniform4f(shader_prog, "lightSource", 1, 0.4, 0.8, 0) 
    gh_gpu_program.uniform4f(shader_prog, "camera", gh_camera.get_view(camera)) 
	 gh_gpu_program.uniform1i(shader_prog, "tex0", 0)
   
	-- Render the triangle and the grid
	--
  gh_object.render(model)
  gh_object.render(street)
  gh_object.render(sidewalk)
  gh_object.render(wall)

	gh_object.render(grid)

		]]></raw_data>
	</script> 
	

	<script name="resize_scene" run_mode="SIZE" >
		<raw_data><![CDATA[	

		winW, winH = gh_window.getsize(0)

		aspect = 1.333
		if (winH > 0) then
		  aspect = winW / winH
		end  
		gh_camera.update_persp(camera, 60, aspect, 0.1, 1000.0)
		gh_camera.set_viewport(camera, 0, 0, winW, winH)

		gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)

		]]></raw_data>
	</script> 
  
</glsl_hacker>
